package com.loveandcomic.defaulteasy;

import android.app.Fragment;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;


/**
 * フラグメントのためのクラス
 * MainActivityのインナークラスだったものを独立したファイルにしたもの
 * static宣言がついていたが削除した
 */
public class PlaceholderFragment extends Fragment {
	///////////////////////////////////////////////////////////
	//フィールド インナークラスでも使いたい変数はフィールドに
	///////////////////////////////////////////////////////////

	///////////////////////////////////////////////////////////
	//メソッド コンストラクタ
	///////////////////////////////////////////////////////////
	public PlaceholderFragment() {
	}

	///////////////////////////////////////////////////////////
	//メソッド ライフサイクル順
	///////////////////////////////////////////////////////////

	///////////////////////////////////////////////////////////
	/**
	 * ライフサイクル01：onAttach()
	 * フラグメントがアクティビティから最初に取り付けられた時に
	 * 呼び出される。
	 */

	///////////////////////////////////////////////////////////
	/**
	 * ライフサイクル02：onCreate()
	 * システムがフラグメントを作成した時に呼び出される。
	 */

	///////////////////////////////////////////////////////////
	/**
	 * ライフサイクル03：onCreateView()
	 * フラグメントが画面描画をはじめて行ったタイミングで
	 * 呼び出される。
	 * 
	 * 【重要】
	 * フラグメントを使用する時、クラスに記述するべき
	 * 中心的メソッド。
	 * 
	 * inflater.inflate()で取得するViewを戻す。
	 * そのとき、リソースのレイアウトXMLを指定する。
	 * 
	 * 戻り値がViewになっている。ここで返されたViewが描画される。
	 */
	@Override
	public View onCreateView(
		LayoutInflater inflater,  //レイアウトインフレーター
		ViewGroup container,      //このフラグメントを含むことになる親のビューグループ
		Bundle savedInstanceState //バンドルオブジェクト（アプリの中断および強制終了されたときのため前回終了時の状態を保持する）
	){
		//レイアウトXMLを読み込んでView要素を作成する
		View rootView = inflater.inflate(
			R.layout.fragment_main, //レイアウトXMLリソース
			container,              //親要素
			false                   //親要素に追加するかどうか
		);
		return rootView;
	}//function

	///////////////////////////////////////////////////////////
	/**
	 * ライフサイクル04：onActivityCreated()
	 * 呼び出し元になるActivityのonCreateメソッドが完了したら
	 * 呼び出される。
	 */

	///////////////////////////////////////////////////////////
	/**
	 * ライフサイクル05：onViewStateRestored()
	 * フラグメントのビュー階層の状態が復元されるときに
	 * 呼び出される。
	 */

	///////////////////////////////////////////////////////////
	/**
	 * ライフサイクル06：onStart()
	 * フラグメントがユーザーに見えるように生成された
	 * タイミングで呼び出される。
	 *
	 * イベントリスナーの登録など
	 */

	///////////////////////////////////////////////////////////
	/**
	 * ライフサイクル07：onResume()
	 * アクティビティがバックグラウンドからフォアグラウンドに
	 * 移るタイミングで呼び出される。
	 */

	///////////////////////////////////////////////////////////
	/**
	 * ライフサイクル08：onPause()
	 * Activityがバックグラウンドに移ったか、もしくは
	 * アクティビティ内のフラグメントを変更する操作を行うことで
	 * ユーザーとの対話がされなくなった場合に呼び出される。
	 */

	///////////////////////////////////////////////////////////
	/**
	 * ライフサイクル09：onStop()
	 * アクティビティが停止したか、もしくはアクティビティ内の
	 * フラグメントを変更する操作を行うことでユーザーに表示され
	 * なくなった場合に呼び出される。
	 *
	 * メモリを食うインスタンスの開放など
	 */

	///////////////////////////////////////////////////////////
	/**
	 * ライフサイクル10：onDestroyView()
	 * フラグメントのリソースをクリアする場合に呼び出される。
	 */

	///////////////////////////////////////////////////////////
	/**
	 * ライフサイクル11：onDestroy()
	 * フラグメントの状態が初期化される場合に呼び出される。
	 */

	///////////////////////////////////////////////////////////
	/**
	 * ライフサイクル12：onDetach()
	 * フラグメントがアクティビティから剥がされる直前に
	 * 呼び出される。
	 */


	///////////////////////////////////////////////////////////
	//メソッド 非ライフサイクル
	//抽象クラスの継承やインターフェイスの実装により
	//オーバーライドが義務化されるメソッドなど
	///////////////////////////////////////////////////////////
	/**
	 * 
	 * 
	 */

	///////////////////////////////////////////////////////////
	//クラス内クラス
	//タイマー処理などとの連携用
	///////////////////////////////////////////////////////////
	/**
	 * 
	 * 
	 */


}//class

